/// {{register.comment}}
struct {{register.name}} final {
{% if register.enums is defined and register.enums -%}
{% for enum in register.enums -%}
{% include 'enum.hpp.jinja' -%}
{%- endfor %}
{%- endif %}
    /// Default Constructor
    {{register.name}}() : whole{0u} {}
    /// Copy Constructor from volatile
    {{register.name}}({{register.name}} volatile const& other) : whole{other.whole} {}
    /// Copy Construction from nonvolatile
    {{register.name}}({{register.name}} const& other) : whole{other.whole} {}
    /// Move Constructor is deleted
    {{register.name}}({{register.name}}&&) = delete;
    /// Parameterized Constructor for constant references
    explicit {{register.name}}({{register.default_type}} const& value) : whole{value} {}
    /// Parameterized Constructor for volatile references
    explicit {{register.name}}({{register.default_type}} volatile& value) : whole{value} {}
    /// Destructor is empty
    ~{{register.name}}() = default;

    /// The internal bitfield for the register
    struct Fields final {
{%- for field in register.fields %}
{%- if field.comment is defined and field.comment %}
        /// {{field.comment}}
{%- endif %}
{%- if field.count > 1 %}
        {{field.type}} {{field.name}} : {{field.count}}; // bits {{field.offset}}:{{field.offset + field.count - 1}}
{%- else %}
        {{field.type}} {{field.name}} : {{field.count}}; // bit {{field.offset}}
{%- endif %}
{%- endfor %}
    };
    //+=MEMORY======================================+
    union {
        Fields bits;
        {{register.default_type}} whole;
    };
    //+=MEMORY======================================+
    /// Move Assignment is deleted
    {{register.name}}& operator=({{register.name}}&&) = delete;
    /// Assignment from a volatile to a non volatile copy of the register.
    /// @note Does not return a reference
    inline void operator=({{register.name}} volatile& other) {
        whole = other.whole;
    }
    /// Assignment from a non volatile to a volatile register
    /// @note Does not return a reference
    inline void operator=({{register.name}} const& other) volatile {
        whole = other.whole;
    }
    /// Copy Assign a complete value from the base type {{register.default_type}} into a volatile version
    /// This allows you to assign the whole register to a literal value or a known constant of the same type.
    /// @note Does not return a reference
    inline void operator=({{register.default_type}} const& value) volatile {
        whole = value;
    }
    /// Returns a copy of the register as an {{register.default_type}}.
    inline explicit operator {{register.default_type}}(void) const {
        return whole;
    }
    /// Returns a copy of the volatile register as an {{register.default_type}}
    inline explicit operator {{register.default_type}}(void) volatile {
        return whole;
    }
    /// Defined as a runtime function which tests all the combinations of the bitfields but not on any particular instance
    static bool validate(void);
};
// Ensure the register is in standard layout format
static_assert(std::is_standard_layout<{{register.name}}>::value, "Must be standard layout");
// Ensure the sizeof the entire register is correct.
static_assert(sizeof({{register.name}}) == {{register.sizeof}}UL, "Must be this exact size");
