
#include "{{peripheral.name}}.h"

void {{register.name}}_InitializeP({{register.name}} *reg, {{register.default_type}} const value) {
    if (reg) {
        reg->whole = value;
    }
}

void {{register.name}}_InitializeV({{register.name}} volatile* reg, {{register.default_type}} const value) {
    if (reg) {
        reg->whole = value;
    }
}

void {{register.name}}_CopyFromToV({{register.name}} const volatile *src, {{register.name}} *dst) {
    if (dst && src) {
        dst->whole = src->whole;
    }
}

void {{register.name}}_CopyFromToP({{register.name}} const *src, {{register.name}} *dst) {
    if (dst && src) {
        dst->whole = src->whole;
    }
}

void {{register.name}}_CopyToFromV({{register.name}} volatile *dst, {{register.name}} const *src) {
    if (dst && src) {
        dst->whole = src->whole;
    }
}

void {{register.name}}_CopyToFromP({{register.name}} *dst, {{register.name}} const *src) {
    if (dst && src) {
        dst->whole = src->whole;
    }
}

bool {{register.name}}_CompareV({{register.name}} const volatile *a, {{register.name}} const *b) {
    if (a && b) {
        return (a->whole == b->whole);
    } else {
        return false;
    }
}

bool {{register.name}}_CompareP({{register.name}} const *a, {{register.name}} const *b) {
    if (a && b) {
        return (a->whole == b->whole);
    } else {
        return false;
    }
}


{# EOF FOR C #}
